<h1>Hacking On Mongrel2</h1>

This is organized more like a FAQ than a guide, but it gives all the
information you probably need to hack on the Mongrel2 source code. It talks
about getting the code, doing your first patch, coding guidelines, etc. These
aren't meant to be strict rules but more guidelines to follow.

<h2>I want to hack on Mongrel2. How do I join?</h2>

As our famous tagline says, "This isn't a hippie commune like Github." We love
patches and contributions from people, but Mongrel2 is a very specific kind of
C code project we have to keep the contributor list small and awesome. That
means we can't just let anyone in, we have to make you earn it. That doesn't
mean you're not awesome if you don't get in, it just means we make it a little
harder to join than your average github project does.
To get in on Mongrel2 you have to prove you can write code by writing some code
doing this:

  #  Follow the instructions in this document and get your source from fossil
     and turn off autosync.
  #  Commit your changes to your repository when you think they're good.
  #  Then go find a_ticket_to_do and write code to fix it.
  #  Join the mongrel2@librelist.com mailing list or join #mongrel2 on
     irc.freenode.org.
  #  Put your mongrel2.fossil repository on a server and do a fossil serve
     mongrel2.fossil so we can pull from it.
  #  Finally, one of us will check out your changes and see if they're good to
     pull. If they are, and you want to get into the project, then just fix a
     few more bugs and we'll let you in.

Each of these steps is documented in this document, so just read it real quick
and get a good understanding of the project before you continue.

<h2>How do I get the source code?</h2>

To get the source, first you need to go to fossil_downloads and download a
static binary for your platform.DO NOT INSTALL THE fossil PACKAGE FROM YOUR OS
AS IT IS PROBABLY WRONG. DEBIAN ESPECIALLY!!!!!
Next do this:

<pre>
  mkdir ~/fossils
  fossil clone http://mongrel2.org:44445/ ~/fossils/mongrel2.fossil
  mkdir -p ~/projects/mongrel2
  cd ~/projects/mongrel2
  fossil open ~/fossils/mongrel2.fossil
  fossil set autosync off
</pre>


<h2>How do I find things to do?</h2>

We have a tickets system built into the fossil DVCS that you can access. You
can get a_ticket_to_do and write code to fix it. Obviously, you'll have to
probably anonymous_login first if you want to do very much.

Why can't I just access everything without logging in?

We want to avoid spam and bots trolling our system and thrashing it or leaving
junk around, so we have a simple anonymous_login captcha you can use. It's a
minor inconvenience that helps us out a lot. It also weeds out people who
aren't smart enough or motivated enough to actually help.

<h2>How do I make a change?</h2>

fossil works like most version control systems in that you make your changes
and "commit" them. With fossil set autosync off it means you're working more
like git or hg and are decentralized. With autosync on it's more like
subversion and you have to have network access and it makes sure you have the
latest before you can commit.
Since you are probably not a committer yet, you just have to do this:

  #  Edit the files you need and write a test if you can.
  #  Use fossil status to make sure you are only changing what you think you
     are changing.
  #  Use fossil up to make sure you're on the latest.
  #  Then fossil commit -m "SOME MESSAGE ABOUT WHY." and you're done.

After you do this you just have to serve your repository to a core contributor
and they can pull your changes.

<h2>How do I serve my repository</h2>

It's pretty easy since fossil has a built-in full web server that will serve
your changes. You just do this:

<pre>
  rsync -azv ~/fossils/mongrel2.fossil YOU@yourserver.com:
  ssh YOU@yourserver.com
  fossil serve mongrel2.fossil
</pre>

Fossil should now be running at http://yourserver.com:8080/ or a similar port
(if it doesn't tell you the port number then it's 8080). You can go to it with
your browser and make sure that it's good.
If you're in your source directory on that remote server, then you can just
type fossil serve and you're done.

<h2>Can I push to my own repository that I just served?</h2>

Definitely. If you want to do that, it'll make your life a lot easier. All you
do is from your local machine:

<pre>
  fossil set autosync on
  fossil remote-url http://YOU@yourserver.com:8080/
</pre>

It will then prompt you for a password which you should have setup when you
cloned your fossil repository. If you forgot you can change it on the remote
machine with
fossil user -R mongrel2.fossil password YOU
.
This tells your local fossil to use your remote fossil as the place to commit
changes. Incidentally, that's the same thing you do for getting changes into
mongrel2.org.

<h2>I forgot my password, how do I set it?</h2>

Use fossil user -R mongrel2.fossil password YOU and it'll ask you for a new
one. You don't need the -R if you are in your source directory.

I just became a committer, how do I setup to make changes to mongrel2.org?

We use autosync in fossil in order to keep everyone straight with the source
and reduce management overhead. Once you get your account on mongrel2.org you
just need to flip your repository into "contributor mode" by turning on
autosync and setting the remote-url:

<pre>
  cd ~/projects/mongrel2
  fossil set autosync on
  fossil remote-url http://YOU@mongrel2.org:44445/
</pre>

It will then prompt you for a password which you should have setup when you
were given your account.

<h2>Why do committers need to keep autosync on?</h2>

I don't think of source control as a "code backup system", but rather as a
"code chat system". When you commit you are sharing your code with everyone
else, and turning autosync off is like constantly talking out of turn. With
autosync on you are forced to keep your repository up to date before you
commit, thus avoiding a lot of merge problems, bad code, and hurt feelings.

<h2>If I become a contributor how do I get mentioned?</h2>

Everyone who submits a change using this method will have their username
mentioned in the timeline even if you're not registered as a core contributor.
Core contributors get mentioned on the home page.
After you become a contributor you then are thrown bags of money and caviar.

<h2>How do you prioritize what to work on?</h2>

We usually have a discussion on the mongrel2@librelist.com_mailing_list to
figure out what to do next. Then we fill in the tickets with the stuff to do.
Then we do that stuff.

<h2>Who comes up with the vision and direction?</h2>

Usually it's Zed, who wrote the majority of the content for this site.

<h2>What will get my contribution rejected?</h2>

Generally if your change adds too much code, is poorly written, doesn't work on
multiple platforms, or doesn't have testing when it needs it. Don't worry
though, we'll tell you how to clean it up and make it nice so that you learn
good style. As a starting point, here's what we consider our style guide:

<h2>What is your style guide?</h2>


  #  Keep your code clean and "flatter" with good use of white space for
     readability.
  #  Refactor common blocks of code or complex branches into functions,
     probably "static inline" is good.
  #  Aim for lines around 80 characters if possible.
  #  Check for errors from EVERY function using the check() macro from dbg.h.
  #  Check for memory allocation working with the check_mem() macro from dbg.h.
  #  Every if-elseif-else should have an else clause, and if that else
     shouldn't happen use the sentinel() macro to give an error.
  #  Same thing for case-switch, always have a default with sentinel() if that
     default should not happen.
  #  When in doubt, read and re-read the man page for function calls to make
     sure you got the error returns and parameters right.
  #  Don't use the C string functions, use bstring from bstring.h to do string
     operations.
  # Try to write a test for your code, which is hard sometimes in C, but
     attempt it at least.

In general the theme for Mongrel2 source is, "Don't code like an asshole." If
you write a piece of code and you didn't consider how another person will use
it, or just didn't care, then it'll probably get rejected.

<h2>How do I learn more about Mongrel2?</h2>

Check out GettingStarted or The_Manual for more.

<h2>How do I see what's been changed on a file or view a diff?</h2>

After you log in you can use the timeline_checkins_only to see the list of
changes. Then you pick one and there's various diffing options.
To see how a file changed, browse for the file in in_Files and find the one you
want to look at. You can then do advanced change logging and diffing of that
file.

The general way fossil works is that you get a lot of features from the command
line, but complex operations like analyzing diffs is better done in the Web
GUI. You can get to your own web GUI any time by doing fossil ui or fossil
serve.
